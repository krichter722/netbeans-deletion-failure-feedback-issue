/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package richtercloud.document.scanner.components;

import java.util.HashSet;
import java.util.Set;
import javax.swing.JTextArea;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import richtercloud.reflection.form.builder.panels.CancelablePanelListener;
import richtercloud.reflection.form.builder.panels.CancelablePanelPanel;

/**
 * Displays OCR results and handles updates to it. Allows canceling fetching of
 * OCR results by displaying nothing, but a cancel button hiding the component
 * part using a {@link CardLayout}.
 *
 * @author richter
 */
/*
internal implemenetation notes:
- Doesn't use a JLayeredPane because it doesn't allow usage of LayoutManagers
(why?) which makes laying out components difficult and hacky. In case that ought
to be changes (would be nicer to see through the cancel panel), try to use
JXLayer of SwingX
<ref>http://stackoverflow.com/questions/27484118/jxlayer-implementation</ref>.
*/
public class OCRResultPanelPanel extends CancelablePanelPanel {
    private static final long serialVersionUID = 1L;
    private final static Logger LOGGER = LoggerFactory.getLogger(OCRResultPanel.class);
    private final Set<OCRResultPanelUpdateListener> updateListeners = new HashSet<>();
    private final String initialValue;
    private final boolean async;
    private final boolean cancelable;

    /**
     * Creates a new {@code OCRResultPanel}.
     *
     * @param initialValue
     */
    /*
    internal implementation notes:
    - a flag to automatically start OCR recognition isn't added here for the
    same reason it's not added to ScanResultPanel
    */
    public OCRResultPanelPanel(String initialValue,
            boolean async,
            boolean cancelable) {
        super();
        this.initComponents();
        this.async = async;
        this.cancelable = cancelable;
        this.oCRResultTextArea.setText(initialValue);
        this.initialValue = initialValue;
        reset0();
        setValue(initialValue);
    }

    public JTextArea getoCRResultTextArea() {
        return oCRResultTextArea;
    }

    public String getValue() {
        return oCRResultTextArea.getText();
    }

    public void setValue(String oCRText) {
        this.oCRResultTextArea.setText(oCRText);
        for(OCRResultPanelUpdateListener updateListener : updateListeners) {
            updateListener.onUpdate(new OCRResultPanelUpdateEvent(oCRText));
        }
    }

    public void addUpdateListener(OCRResultPanelUpdateListener updateListener) {
        this.updateListeners.add(updateListener);
    }

    public void removeUpdateListener(OCRResultPanelUpdateListener updateListener) {
        this.updateListeners.remove(updateListener);
    }

    private void reset0() {
        if(this.initialValue != null) {
            this.oCRResultTextArea.setText(initialValue);
        }else {
            this.oCRResultTextArea.setText("");
        }
    }

    public void reset() {
        reset0();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        oCRResultButton = new javax.swing.JButton();
        oCRResultTextAreaScrollPane = new javax.swing.JScrollPane();
        oCRResultTextArea = new javax.swing.JTextArea();

        oCRResultButton.setText("OCR recognition");
        oCRResultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oCRResultButtonActionPerformed(evt);
            }
        });

        oCRResultTextArea.setColumns(20);
        oCRResultTextArea.setRows(5);
        oCRResultTextAreaScrollPane.setViewportView(oCRResultTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oCRResultTextAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 332, Short.MAX_VALUE)
                        .addComponent(oCRResultButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(oCRResultTextAreaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(oCRResultButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void oCRResultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oCRResultButtonActionPerformed
        for(CancelablePanelListener listener : getListeners()) {
            listener.onStart(async,
                    cancelable);
        }
    }//GEN-LAST:event_oCRResultButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton oCRResultButton;
    private javax.swing.JTextArea oCRResultTextArea;
    private javax.swing.JScrollPane oCRResultTextAreaScrollPane;
    // End of variables declaration//GEN-END:variables
}
