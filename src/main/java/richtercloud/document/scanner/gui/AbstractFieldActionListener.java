/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package richtercloud.document.scanner.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import richtercloud.document.scanner.components.ValueDetectionPanel;
import richtercloud.document.scanner.setter.ValueSetter;
import richtercloud.message.handler.Message;
import richtercloud.message.handler.MessageHandler;
import richtercloud.reflection.form.builder.ReflectionFormPanel;

/**
 * Allows code reusage of handling of class field popup menu (e.g. those
 * generated by {@link OCRPanel#setupClassFieldPopupMenu(java.util.List, java.util.Map, richtercloud.reflection.form.builder.ReflectionFormBuilder, javax.swing.JMenu) })
 * in auto OCR value detection and {@link OCRPanel}'s popup.
 *
 * @author richter
 * @param <T> possibility to enforce a specific {@link OCRResult}
 */
/*
internal implementation notes:
- Although it'd be nice to handle trial-error value parsing based on OCR panel
selection in AbstractFieldActionListener subclass in order to keep GUI
operations (figuring out which format is selected menu) and model/data
operations (setting value on component and field) separated
*/
public abstract class AbstractFieldActionListener<T> implements ActionListener {
    private final static Logger LOGGER = LoggerFactory.getLogger(AbstractFieldActionListener.class);
    private final Field field;
    private final ReflectionFormPanel reflectionFormPanel;
    private final Map<Class<? extends JComponent>, ValueSetter<?, ?>> valueSetterMapping;
    private final MessageHandler messageHandler;

    public AbstractFieldActionListener(Field field, ReflectionFormPanel reflectionFormPanel, Map<Class<? extends JComponent>, ValueSetter<?, ?>> valueSetterMapping, MessageHandler messageHandler) {
        this.field = field;
        this.reflectionFormPanel = reflectionFormPanel;
        this.valueSetterMapping = valueSetterMapping;
        this.messageHandler = messageHandler;
    }

    public Field getField() {
        return field;
    }

    public MessageHandler getMessageHandler() {
        return messageHandler;
    }

    public ReflectionFormPanel getReflectionFormPanel() {
        return reflectionFormPanel;
    }

    protected abstract T retrieveValue();

    protected JComponent retrieveComponent() {
        return this.reflectionFormPanel.getComponentByField(this.field);
    }

    protected ValueSetter retrieveValueSetter(JComponent comp) {
        assert comp instanceof ValueDetectionPanel;
        ValueDetectionPanel compCast = (ValueDetectionPanel) comp;
        JComponent classComponent = compCast.getClassComponent();
        ValueSetter valueSetter = this.valueSetterMapping.get(classComponent.getClass());
        if (valueSetter == null) {
            throw new IllegalArgumentException(String.format("No %s mapped "
                    + "to component %s", ValueSetter.class, classComponent));
        }
        return valueSetter;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JComponent comp = retrieveComponent();
        T fieldValue = retrieveValue();
        ValueSetter valueSetter = retrieveValueSetter(comp);
        try {
            valueSetter.setValue(fieldValue, comp);
        } catch (Exception ex) {
            LOGGER.error("An exception during setting the OCR value on " + "component occured", ex);
            messageHandler.handle(new Message(String.format("The " + "following exception occured while setting the " + "selected value on the field: %s", ExceptionUtils.getRootCauseMessage(ex)), JOptionPane.ERROR_MESSAGE, "Exception occured"));
        }
    }
}
