/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package richtercloud.document.scanner.gui.scanner;

import java.awt.Window;
import java.util.Arrays;
import javax.swing.JDialog;
import richtercloud.document.scanner.gui.Constants;
import richtercloud.document.scanner.gui.DocumentScanner;

/**
 *
 * @author richter
 */
/*
internal implementation notes:
- There's no need for a function to fail if a page count has been specified
which is higher than the pages available in the ADF because there's always the
possibility to add more scanned pages.
*/
public class ScannerPageSelectDialog extends JDialog {
    private static final long serialVersionUID = 1L;
    /**
     * The selected scan source. {@code null} indicates that the dialog has been
     * canceled.
     */
    private DocumentSource selectedDocumentSource = null;

    /**
     * Creates new form ScannerPageSelectDialog
     */
    public ScannerPageSelectDialog(Window parent,
            DocumentSource initialDocumentSource) {
        super(parent,
                DocumentScanner.generateApplicationWindowTitle("Select pages to scan",
                        Constants.APP_NAME,
                        Constants.APP_VERSION),
                ModalityType.APPLICATION_MODAL //modal
        );
        if(initialDocumentSource == null) {
            throw new IllegalArgumentException("initialScanSource mustn't be null");
        }
        initComponents();
        aDFButtonGroup.add(allRadioButton);
        aDFButtonGroup.add(numberRadioButton);
        scanSourceButtonGroup.add(flatbedRadioButton);
        scanSourceButtonGroup.add(aDFRadioButton);
        flatbedRadioButton.addActionListener((event) -> {
            toggleADFButtonGroupComponents(false);
            //can't use aDFRadioButton.isEnabled because it's still enabled when
            //this ActionListener is invoked
        });
        aDFRadioButton.addActionListener((event) -> {
            toggleADFButtonGroupComponents(true);
        });
        if(initialDocumentSource == DocumentSource.FLATBED) {
            flatbedRadioButton.setSelected(true);
                //doesn't invoked action listener
            toggleADFButtonGroupComponents(false);
        }else if(initialDocumentSource == DocumentSource.ADF || initialDocumentSource == DocumentSource.ADF_DUPLEX) {
            //ADF or duplex ADF
            aDFRadioButton.setSelected(true);
            toggleADFButtonGroupComponents(true);
            if(initialDocumentSource == DocumentSource.ADF_DUPLEX) {
                duplexCheckBox.setSelected(true);
            }
        }else {
            throw new IllegalArgumentException(String.format(
                    "initialDocumentSource has to be one of %s",
                    Arrays.toString(DocumentSource.values())));
        }
    }

    private void toggleADFButtonGroupComponents(boolean enabled) {
        label.setEnabled(enabled);
        allRadioButton.setEnabled(enabled);
        duplexCheckBox.setEnabled(enabled);
        numberRadioButton.setEnabled(enabled);
            //should trigger enabling of components below numberRadioButton
    }

    public DocumentSource getSelectedDocumentSource() {
        return selectedDocumentSource;
    }

    public boolean isScanAll() {
        return allRadioButton.isSelected();
    }

    public int getPageCount() {
        return (int) pageCountSpinner.getValue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aDFButtonGroup = new javax.swing.ButtonGroup();
        scanSourceButtonGroup = new javax.swing.ButtonGroup();
        label = new javax.swing.JLabel();
        allRadioButton = new javax.swing.JRadioButton();
        numberRadioButton = new javax.swing.JRadioButton();
        pageCountSpinner = new javax.swing.JSpinner();
        scanButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        flatbedRadioButton = new javax.swing.JRadioButton();
        aDFRadioButton = new javax.swing.JRadioButton();
        duplexCheckBox = new javax.swing.JCheckBox();

        label.setText("How many pages ought to be scanned?");
        label.setEnabled(false);

        allRadioButton.setSelected(true);
        allRadioButton.setText("All in ADF");
        allRadioButton.setEnabled(false);
        allRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRadioButtonActionPerformed(evt);
            }
        });

        numberRadioButton.setText("Number of pages:");
        numberRadioButton.setEnabled(false);
        numberRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberRadioButtonActionPerformed(evt);
            }
        });

        pageCountSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        pageCountSpinner.setEnabled(false);

        scanButton.setText("Scan");
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("<html><body style=\"white-space:pre-line; width=10\"><p>If more pages are available in the ADF the scanner might remove them by emptying the ADF</p></body></html>");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setEnabled(false);
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        flatbedRadioButton.setSelected(true);
        flatbedRadioButton.setText("Scan from flatbed");

        aDFRadioButton.setText("Scan from Automated Document Feeder (ADF)");

        duplexCheckBox.setText("Duplex");
        duplexCheckBox.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(duplexCheckBox)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(cancelButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scanButton))
                            .addComponent(flatbedRadioButton)
                            .addComponent(aDFRadioButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(allRadioButton)
                                    .addComponent(label)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(numberRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(pageCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flatbedRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aDFRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(duplexCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberRadioButton)
                    .addComponent(pageCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scanButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void allRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRadioButtonActionPerformed
        pageCountSpinner.setEnabled(false);
    }//GEN-LAST:event_allRadioButtonActionPerformed

    private void numberRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberRadioButtonActionPerformed
        pageCountSpinner.setEnabled(true);
    }//GEN-LAST:event_numberRadioButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanButtonActionPerformed
        if(flatbedRadioButton.isSelected()) {
            this.selectedDocumentSource = DocumentSource.FLATBED;
        }else {
            //aDFRadioButton selected
            if(duplexCheckBox.isSelected()) {
                this.selectedDocumentSource = DocumentSource.ADF_DUPLEX;
            }else {
                this.selectedDocumentSource = DocumentSource.ADF;
            }
        }
        this.setVisible(false);
    }//GEN-LAST:event_scanButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup aDFButtonGroup;
    private javax.swing.JRadioButton aDFRadioButton;
    private javax.swing.JRadioButton allRadioButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox duplexCheckBox;
    private javax.swing.JRadioButton flatbedRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel label;
    private javax.swing.JRadioButton numberRadioButton;
    private javax.swing.JSpinner pageCountSpinner;
    private javax.swing.JButton scanButton;
    private javax.swing.ButtonGroup scanSourceButtonGroup;
    // End of variables declaration//GEN-END:variables
}
